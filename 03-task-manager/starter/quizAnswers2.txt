1) In this lesson, you created a middleware function called asyncWrapper. Why?

The reason I created a middleware function called asyncWrapper is to make the code more concise.
Using the try-catch boilerplate code, while useful, can be redundant when defining the controllers.
Instead, by creating a middleware function that sets that functionality elsewhere, it helps keep the code
more manageable.

2) Suppose that you want to make sure that both a status code and and error 
message are send back to the user when they request the URL for a task that 
does not exist. Assume that youâ€™ve created a CustomAPIError class and an error 
handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here
    return next(createCustomError(`No task with id: ${taskID}`, 404));
  }
  res.status(200).json({ task });
});